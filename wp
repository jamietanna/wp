#!/usr/bin/python

import sys
import os
import signal
import ConfigParser
import shutil

import colour
import config
import subprocess

import random

from generic import *

class UserConfig:
    WM    = None
    BG    = None
    SHELL = None




# SO 1112343
def signal_handler(signal, frame):
    print
    error("User cancelled operation(s). ")
    error("Now exiting. ")
    sys.exit(1)


def populateFromArray(settingsArray, config_file, configFileKey, error_str):
    # wrap all the error handling in here, to make it quicker, and safer to 
    #  add new sections of code in for new settings types

    try:
        configFileValue = config_file.get(config.WP_CONFIG_SECTION, configFileKey)

        for val in settingsArray:
            if configFileValue == val.getShortName():
                return val
        # if we reach this far, it's not valid!
        raise Exception
    except:
        error("No valid " + error_str + " in config, please run setup again. ")
        return None


def populateSettings():
    config_file = ConfigParser.ConfigParser()
    config_file.read(config.WP_CONFIG_FILE)

    UserConfig.WM    = populateFromArray(config.WM,   config_file, "windowmanager",     "window manager")
    UserConfig.BG    = populateFromArray(config.BG,   config_file, "backgroundmanager", "background manager")
    UserConfig.SHELL = populateFromArray(config.SHELL,config_file, "shell",             "shell")

    # if any of our variables are None, we've hit a non-existent value,
    #  therefore exit. 
    if any(x == None for x in [UserConfig.WM, UserConfig.BG, UserConfig.SHELL]):
       sys.exit(1)


def inList(toCheck, theList, error_str):
    if toCheck.upper() in theList:
        return toCheck.upper()
    else:
        error(error_str)
        return None

def setup():
    anyErrors = False

    _BGs    = [bg.getShortName()    for bg in config.BG]
    _SHs    = [s.getShortName()     for s in config.SHELL]
    _WMs    = [wm.getShortName()    for wm in config.WM]

    if len(sys.argv) == 5:
        WM = inList(sys.argv[2], _WMs, "Invalid Window Manager")
        BG = inList(sys.argv[3], _BGs, "Invalid Background Manager")
        SH = inList(sys.argv[4], _SHs, "Invalid Shell")

        anyErrors = any(x == None for x in [WM, BG, SH])

    else:
        WMi = enumerateChoices(_WMs)
        WM  = config.WM[int(WMi)].getShortName()

        BGi = enumerateChoices(_BGs)
        BG  = config.BG[int(BGi)].getShortName()

        SHi = enumerateChoices(_SHs)
        SH  = config.SHELL[int(SHi)].getShortName()

    if not anyErrors:
        with open(config.WP_CONFIG_FILE, 'w') as config_file_:
            config_file = ConfigParser.RawConfigParser()
            config_file.add_section(config.WP_CONFIG_SECTION)

            config_file.set(config.WP_CONFIG_SECTION, "WindowManager",      WM)
            config_file.set(config.WP_CONFIG_SECTION, "BackgroundManager",  BG)
            config_file.set(config.WP_CONFIG_SECTION, "Shell",              SH)
            
            config_file.write(config_file_)
            output("New setup: {} {} {}".format(WM,BG,SH))

def usage():
    output("Usage: {0}".format(sys.argv[0]))
    output("            setup   [WM BGM SHELL]      Run setup, with optional WindowManager, BackgroundManager and Shell")
    output("            add     file1 [file2 ...]   Add file(s), and generate metadata files")
    output("            refresh                     Regenerate all metadata for images in " + config.WP_DIRECTORY)
    output("            help    setup               List all possible arguments to setup")
# TODO don't bother adding files if they already exist
def addAFile(oldPath):
    path      = config.WP_DIRECTORY + "/" + os.path.basename(oldPath)

    if not os.path.exists(path):
        shutil.copy(oldPath, path)

    colours = colour.getColours(path)

    temp   = ""
    shcols = ""

    for idx, c in enumerate(colours):
        if UserConfig.WM == "I3":
            pass
        elif UserConfig.WM == "X":
            temp += """*color{}: {}\n""".format(idx, c)
        elif UserConfig.WM == "OTHER":
            pass
        shcols += """export COLOR{}="{}"\n""".format(idx, c)
    
    UserConfig.SHELL.writeColoursToFile(colours, os.path.basename(oldPath))

def add(files):
    for f in files:
        addAFile(f)

def imagesFromDirectory(path):
    onlyfiles =  [ f for f in os.listdir(path) if os.path.isfile(os.path.join(path,f)) ]
    images = []
    for f in onlyfiles:
        _, fE = os.path.splitext(f)
        if fE in config.ALLOWED_FILE_EXTS:
            images.append(f)
    return images

def change():
    images = imagesFromDirectory(config.WP_DIRECTORY)
    newBG = random.choice(images)

    UserConfig.BG.changeBackground(os.path.join(config.WP_DIRECTORY, newBG))

    __path = UserConfig.SHELL.getPath(os.path.join(config.WP_DIRECTORY, newBG))
    if not os.path.exists(__path):
        output("Note: No metadata found, generating now")
        addAFile(os.path.join(config.WP_DIRECTORY, newBG))

    UserConfig.SHELL.onBackgroundChange(os.path.join(config.WP_DIRECTORY, newBG))
    output("Changed background to " + newBG)

def main():

    signal.signal(signal.SIGINT, signal_handler)

    debug('Number of arguments: {} arguments.'.format(str(len(sys.argv))))
    debug('Argument List: {}'.format(str(sys.argv)))

    if len(sys.argv) > 1:
        
        cmd = sys.argv[1].lower()
        if cmd == "setup":
            setup()
        else:
            if os.path.isdir(config.WP_DIRECTORY):
                if not os.path.exists(config.WP_CONFIG_FILE):
                    setup()
            else:
                os.makedirs(config.WP_DIRECTORY)
                setup()
            # do rest of 'switch' statement

            populateSettings()

            if cmd == "add":
                # TODO check if all images
                files = []
                for idx, f in enumerate(sys.argv):
                    if idx > 1:
                        files.append(f)
                add(files)
            elif cmd == "change":
                change()
            elif cmd == "refresh":
                images = imagesFromDirectory(config.WP_DIRECTORY)
                output("Refreshing {} files, this could take some time. ".format(len(images)))
                add(images)
            elif cmd == "help":
                output("Possible WMs:")
                for wm in config.WM:
                    output("  {}".format(wm.getShortName()))
                output("Possible BGs:")
                for bg in config.BG:
                    output("  {}".format(bg.getShortName()))
                output("Possible SHs:")
                for sh in config.SHELL:
                    output("  {}".format(sh.getShortName()))



            else:
                return
            
    else:
        usage()

if __name__ == "__main__":
    main()



