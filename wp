#!/usr/bin/python

import sys
import os
import signal
import ConfigParser
import shutil

import colour
import config

import random

from generic import output, error, debug, enumerate_choices
import applicationwrappers

class user_config:
    WM    = None
    BG    = None
    SHELL = None




# SO 1112343
def sigint_handler():
    print
    error("User cancelled operation(s). ")
    error("Now exiting. ")
    sys.exit(1)


def populate_from_array(settings_array, config_file, 
                        config_file_key, error_str):
    # wrap all the error handling in here, to make it quicker, and safer to 
    #  add new sections of code in for new settings types

    try:
        config_file_value = config_file.get(config.WP_CONFIG_SECTION, 
                                            config_file_key)

        for val in settings_array:
            if config_file_value == val.get_short_name():
                return val
        # if we reach this far, it's not valid!
        raise Exception()
    except:
        error("No valid " + error_str + " in config, please run setup again. ")
        return None

def populate_settings():
    config_file = ConfigParser.ConfigParser()
    config_file.read(config.WP_CONFIG_FILE)

    user_config.WM    = populate_from_array(applicationwrappers.WM,   
                                            config_file, 
                                            config.WM_CONFIG_KEY, 
                                            "window manager")
    user_config.BG    = populate_from_array(applicationwrappers.BG,   
                                            config_file, 
                                            config.BG_CONFIG_KEY, 
                                            "background manager")
    user_config.SHELL = populate_from_array(applicationwrappers.SHELL,
                                            config_file, 
                                            config.SH_CONFIG_KEY, 
                                            "shell")

    # if any of our variables are None, we've hit a non-existent value,
    #  therefore exit. 
    if any(x == None for x in 
                        [user_config.WM, user_config.BG, user_config.SHELL]):
        sys.exit(1)


def in_list(to_check, the_list, error_str):
    if to_check.upper() in the_list:
        return to_check.upper()
    else:
        error(error_str)
        return None

def setup():
    _BGs    = [bg.get_short_name()    for bg in applicationwrappers.BG]
    _SHs    = [s.get_short_name()     for s  in applicationwrappers.SHELL]
    _WMs    = [wm.get_short_name()    for wm in applicationwrappers.WM]

    if len(sys.argv) == 5:
        WM = in_list(sys.argv[2], _WMs, "Invalid Window Manager")
        BG = in_list(sys.argv[3], _BGs, "Invalid Background Manager")
        SH = in_list(sys.argv[4], _SHs, "Invalid Shell")

    else:
        WMi = enumerate_choices(_WMs)
        WM  = applicationwrappers.WM[int(WMi)].get_short_name()

        BGi = enumerate_choices(_BGs)
        BG  = applicationwrappers.BG[int(BGi)].get_short_name()

        SHi = enumerate_choices(_SHs)
        SH  = applicationwrappers.SHELL[int(SHi)].get_short_name()

    if not any(x == None for x in [WM, BG, SH]):
        with open(config.WP_CONFIG_FILE, 'w') as config_file_:
            config_file = ConfigParser.RawConfigParser()
            config_file.add_section(config.WP_CONFIG_SECTION)

            config_file.set(config.WP_CONFIG_SECTION, config.WM_CONFIG_KEY, WM)
            config_file.set(config.WP_CONFIG_SECTION, config.BG_CONFIG_KEY, BG)
            config_file.set(config.WP_CONFIG_SECTION, config.SH_CONFIG_KEY, SH)
            
            config_file.write(config_file_)
            output("New setup: {} {} {}".format(WM, BG, SH))

def usage():
    output("Usage: {0}".format(sys.argv[0]))
    output("            setup   [WM BGM SHELL]      Run setup, with optional Window_manager, Background_manager and Shell")
    output("            add     file1 [file2 ...]   Add file(s), and generate metadata files")
    output("            refresh                     Regenerate all metadata for images in " + config.WP_DIRECTORY)
    output("            help    setup               List all possible arguments to setup")
# TODO don't bother adding files if they already exist
def addAFile(old_path):
    path      = config.WP_DIRECTORY + "/" + os.path.basename(old_path)

    if not os.path.exists(path):
        shutil.copy(old_path, path)

    colours = colour.get_colours(path)

    # TODO WM.write_colours_to_file()
    user_config.SHELL.write_colours_to_file(colours, os.path.basename(old_path))

def add(files):
    for f in files:
        addAFile(f)

def images_from_directory(path):
    onlyfiles =  [ f for f in os.listdir(path)
                                if os.path.isfile(os.path.join(path,f)) ]
    images = []
    for f in onlyfiles:
        _, fE = os.path.splitext(f)
        if fE in config.ALLOWED_FILE_EXTS:
            images.append(f)
    return images

def change():
    images = images_from_directory(config.WP_DIRECTORY)
    newBG = random.choice(images)

    joined = os.path.join(config.WP_DIRECTORY, newBG)

    user_config.BG.change_background(joined)

    __path = user_config.SHELL.get_path(joined)
    if not os.path.exists(__path):
        output("Note: No metadata found, generating now")
        addAFile(os.path.join(config.WP_DIRECTORY, newBG))

    user_config.SHELL.on_background_change(joined)
    output("Changed background to " + newBG)

def handle_cmd(cmd):
    if cmd == "add":
        # TODO check if all images
        files = []
        for idx, f in enumerate(sys.argv):
            if idx > 1:
                files.append(f)
        add(files)
    elif cmd == "change":
        change()
    elif cmd == "refresh":
        images = images_from_directory(config.WP_DIRECTORY)
        output("Refreshing {} files, this could take some time. "
                .format(len(images)))
        add(images)
    elif cmd == "help":
        output("Possible WMs:")
        for wm in applicationwrappers.WM:
            output("  {}".format(wm.get_short_name()))
        output("Possible BGs:")
        for bg in applicationwrappers.BG:
            output("  {}".format(bg.get_short_name()))
        output("Possible SHs:")
        for sh in applicationwrappers.SHELL:
            output("  {}".format(sh.get_short_name()))


def main():

    signal.signal(signal.SIGINT, sigint_handler)

    debug('Number of arguments: {} arguments.'.format(str(len(sys.argv))))
    debug('Argument List: {}'.format(str(sys.argv)))

    if len(sys.argv) > 1:
        
        cmd = sys.argv[1].lower()
        if cmd == "setup":
            setup()
        else:
            if os.path.isdir(config.WP_DIRECTORY):
                if not os.path.exists(config.WP_CONFIG_FILE):
                    setup()
            else:
                os.makedirs(config.WP_DIRECTORY)
                setup()
            # do rest of 'switch' statement

            populate_settings()

            handle_cmd(cmd)
            
            
    else:
        usage()

if __name__ == "__main__":
    main()



